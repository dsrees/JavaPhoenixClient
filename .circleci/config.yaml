# Android Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-android/ for more details
#

# aliases:
#   - &env_defaults
#       JVM_OPTS: -Xmx3200m

#   # Configuration for each Container
#   - &container_config
#       working_directory: ~/code
#       docker:
#         - image: circleci/android:api-28-alpha
#       environment:
#         <<: *env_defaults


#   # Restore, install, and cache gems
#   - &restore_gems_cache
#     restore_cache:
#       key: 1-gems-{{ checksum "Gemfile.lock" }}

#   - &install_gems
#     run: 
#       name: Install Gems
#       command: bundle check || bundle install --path vendor/bundle

#   - &save_gems_cache
#     save_cache:
#       key: 1-gems-{{ checksum "Gemfile.lock" }}
#       paths:
#         - vendor/bundle

#   # Restore gradle wrapper cache, gradle cache, and gradle builds cache
#   - &restore_gradle_wrapper_cache
#     restore_cache:
#       key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

#   - &restore_gradle_cache
#     restore_cache:
#       keys:
#         - gradle-cache-{{ checksum "build.gradle" }}
#         - gradle-cache

#   - &restore_gradle_build_cache
#     restore_cache:
#       keys:
#         - gradle-build-caches-{{ .Revision }}
#         - gradle-build-caches

#   - &run_restore_gradle_cache
#     run:
#       name: Restoring Gradle Build Caches
#       command: |
#         [ -d ~/gradle-build-caches ] &&
#           [ -n "$(ls -A ~/gradle-build-caches)" ] &&
#           rm -rf ~/.gradle/caches/build-cache-* &&
#           mv ~/gradle-build-caches/* ~/.gradle/caches/ || true

#   - &run_download_gradle_dependencies
#     run:
#       name: Downloading Dependencies
#       command: ./gradlew --max-workers 2 downloadDependencies


#   ## Save gradle wrapper cache, gradle cache, and gradle builds cache
#   - &save_gradle_wrapper_cache
#     save_cache:
#       paths: 
#         - ~/.gradle/wrapper/
#       key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

#   - &save_gradle_cache
#     save_cache:
#       paths: 
#         - ~/.gradle/caches/
#       key: gradle-cache-{{ checksum "build.gradle" }}


#   - &run_collect_gradle_cache
#     run:
#       name: Collecting Gradle Build Caches
#       command: |
#         mkdir -p ~/gradle-build-caches
#         [ -d ~/.gradle/caches ] &&
#           [ -n "$(ls -Ad ~/.gradle/caches/build-cache-* 2>/dev/null)" ] &&
#           mv ~/.gradle/caches/build-cache-* ~/gradle-build-caches || true
#       when: always

#   - &save_gradle_build_cache
#     save_cache:
#       paths: 
#         - ~/gradle-build-caches
#       key: gradle-build-caches-{{ .Revision }}
#       when: always


#   # Fastlane
#   - &run_fastlane
#     run: 
#       name: Fastlane
#       command: bundle exec fastlane $FASTLANE_LANE


#   # Build Artifiacts
#   - &upload_jacoco_reports
#     run:
#       name: Uploading Jacocos Reports to CodeCov
#       command: bash <(curl -s https://codecov.io/bash) -f app/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml -t d02ee4f4-28f4-445b-9609-ccaf405379f6
#       when: always

#   - &store_build_artifacts
#     store_artifacts:
#       path: app/build/reports/lint-results-debug.html
#       destination: reports


#   - &test_steps
#     steps:
#       - checkout
#       - *restore_gems_cache
#       - *install_gems
#       - *save_gems_cache
#       - *restore_gradle_wrapper_cache
#       - *restore_gradle_cache
#       - *restore_gradle_build_cache
#       - *run_restore_gradle_cache
#       - *run_download_gradle_dependencies
#       - *save_gradle_wrapper_cache
#       - *save_gradle_cache
#       - *run_collect_gradle_cache
#       - *run_fastlane
#       - *run_collect_gradle_cache
#       - *save_gradle_build_cache
#       - *upload_jacoco_reports
#       - *store_build_artifacts

#   - &ship_steps
#     steps:
#       - checkout
#       - *restore_gems_cache
#       - *install_gems
#       - *save_gems_cache
#       - *restore_gradle_wrapper_cache
#       - *restore_gradle_cache
#       - *restore_gradle_build_cache
#       - *run_restore_gradle_cache
#       - *run_download_gradle_dependencies
#       - *save_gradle_wrapper_cache
#       - *save_gradle_cache
#       - *run_collect_gradle_cache
#       - *run_fastlane
#       - *run_collect_gradle_cache
#       - *save_gradle_build_cache

# Build Configuration
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
        
      # run tests!
      - run: gradle test





# version: 2
# jobs:
#   build-test-coverage:
#     <<: *container_config
#     environment:
#       <<: *env_defaults
#       FASTLANE_LANE: unit_test
#     <<: *test_steps

#   ship-staging:
#     <<: *container_config
#     environment:
#       <<: *env_defaults
#       FASTLANE_LANE: staging
#     <<: *ship_steps

#   ship-beta:
#     <<: *container_config
#     environment:
#       <<: *env_defaults
#       FASTLANE_LANE: beta
#     <<: *ship_steps

#   ship-release:
#     <<: *container_config
#     environment:
#       <<: *env_defaults
#       FASTLANE_LANE: release
#     <<: *ship_steps

# workflows:
#   version: 2
#   pr:
#     jobs:
#       - build-test-coverage:
#           filters:
#             branches:
#               only: 
#                 - /^feature.*/
#   deploy:
#     jobs:
#       - build-test-coverage:
#           filters:
#             branches:
#               ignore: 
#                 - /^feature.*/
#       - ship-staging:
#           filters:
#             branches:
#               only:
#                 - /^release.*/
#                 - /^hotfix.*/
#           requires:
#             - build-test-coverage
#       - ship-beta:
#           filters:
#             branches:
#               only: master
#           requires:
#             - build-test-coverage
#       - hold:
#           type: approval
#           requires:
#             - ship-beta
#           filters:
#             branches:
#               only: master
#       - ship-release:
#           requires:
#             - hold
